(ns testgen.core_test
	(:require [clojure.test :refer :all]
	[testgen.core :refer :all]))

;; auto-generated by testgen - see https://github.com/simon-brooke/testgen

(deftest
 test-maybe-quote
 (testing
  "maybe-quote"Generating assertion for (maybe-quote generic-args)
  (is
   (=
    (maybe-quote generic-args)
    ''nil))Generating assertion for (maybe-quote "Convert val into a form in which, after being passed through the pretty\n\tprinter, it will be reconstituted in a form useful to the test")
  (is
   (=
    (maybe-quote
     "Convert val into a form in which, after being passed through the pretty\n\tprinter, it will be reconstituted in a form useful to the test")
    ''"Convert val into a form in which, after being passed through the pretty\n\tprinter, it will be reconstituted in a form useful to the test"))Generating assertion for (maybe-quote true)
  (is (= (maybe-quote true) ''true))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest
 test-generate-assertion
 (testing
  "generate-assertion"Generating assertion for (generate-assertion generic-args generic-args)Generating assertion for (nil)
  (is
   (=
    (generate-assertion generic-args generic-args)
    '(is
      (thrown?
       clojure.lang.Compiler$CompilerException
       (nil)))))Generating assertion for (generate-assertion generic-args "Generate an appropiate assertion for these arguments passed to this function")Generating assertion for (nil \G \e \n \e \r \a \t \e \space \a \n \space \a \p \p \r \o \p \i \a \t \e \space \a \s \s \e \r \t \i \o \n \space \f \o \r \space \t \h \e \s \e \space \a \r \g \u \m \e \n \t \s \space \p \a \s \s \e \d \space \t \o \space \t \h \i \s \space \f \u \n \c \t \i \o \n)
  (is
   (=
    (generate-assertion
     generic-args
     "Generate an appropiate assertion for these arguments passed to this function")
    '(is
      (thrown?
       clojure.lang.Compiler$CompilerException
       (nil
        \G
        \e
        \n
        \e
        \r
        \a
        \t
        \e
        \space
        \a
        \n
        \space
        \a
        \p
        \p
        \r
        \o
        \p
        \i
        \a
        \t
        \e
        \space
        \a
        \s
        \s
        \e
        \r
        \t
        \i
        \o
        \n
        \space
        \f
        \o
        \r
        \space
        \t
        \h
        \e
        \s
        \e
        \space
        \a
        \r
        \g
        \u
        \m
        \e
        \n
        \t
        \s
        \space
        \p
        \a
        \s
        \s
        \e
        \d
        \space
        \t
        \o
        \space
        \t
        \h
        \i
        \s
        \space
        \f
        \u
        \n
        \c
        \t
        \i
        \o
        \n)))))Generating assertion for (generate-assertion generic-args "Generating assertion for ")Generating assertion for (nil \G \e \n \e \r \a \t \i \n \g \space \a \s \s \e \r \t \i \o \n \space \f \o \r \space)
  (is
   (=
    (generate-assertion generic-args "Generating assertion for ")
    '(is
      (thrown?
       clojure.lang.Compiler$CompilerException
       (nil
        \G
        \e
        \n
        \e
        \r
        \a
        \t
        \i
        \n
        \g
        \space
        \a
        \s
        \s
        \e
        \r
        \t
        \i
        \o
        \n
        \space
        \f
        \o
        \r
        \space)))))Generating assertion for (generate-assertion "Generate an appropiate assertion for these arguments passed to this function" generic-args)Generating assertion for ("Generate an appropiate assertion for these arguments passed to this function")
  (is
   (=
    (generate-assertion
     "Generate an appropiate assertion for these arguments passed to this function"
     generic-args)
    '(is
      (thrown?
       java.lang.ClassCastException
       ("Generate an appropiate assertion for these arguments passed to this function")))))Generating assertion for (generate-assertion "Generate an appropiate assertion for these arguments passed to this function" "Generate an appropiate assertion for these arguments passed to this function")Generating assertion for ("Generate an appropiate assertion for these arguments passed to this function" \G \e \n \e \r \a \t \e \space \a \n \space \a \p \p \r \o \p \i \a \t \e \space \a \s \s \e \r \t \i \o \n \space \f \o \r \space \t \h \e \s \e \space \a \r \g \u \m \e \n \t \s \space \p \a \s \s \e \d \space \t \o \space \t \h \i \s \space \f \u \n \c \t \i \o \n)
  (is
   (=
    (generate-assertion
     "Generate an appropiate assertion for these arguments passed to this function"
     "Generate an appropiate assertion for these arguments passed to this function")
    '(is
      (thrown?
       java.lang.ClassCastException
       ("Generate an appropiate assertion for these arguments passed to this function"
        \G
        \e
        \n
        \e
        \r
        \a
        \t
        \e
        \space
        \a
        \n
        \space
        \a
        \p
        \p
        \r
        \o
        \p
        \i
        \a
        \t
        \e
        \space
        \a
        \s
        \s
        \e
        \r
        \t
        \i
        \o
        \n
        \space
        \f
        \o
        \r
        \space
        \t
        \h
        \e
        \s
        \e
        \space
        \a
        \r
        \g
        \u
        \m
        \e
        \n
        \t
        \s
        \space
        \p
        \a
        \s
        \s
        \e
        \d
        \space
        \t
        \o
        \space
        \t
        \h
        \i
        \s
        \space
        \f
        \u
        \n
        \c
        \t
        \i
        \o
        \n)))))Generating assertion for (generate-assertion "Generate an appropiate assertion for these arguments passed to this function" "Generating assertion for ")Generating assertion for ("Generate an appropiate assertion for these arguments passed to this function" \G \e \n \e \r \a \t \i \n \g \space \a \s \s \e \r \t \i \o \n \space \f \o \r \space)
  (is
   (=
    (generate-assertion
     "Generate an appropiate assertion for these arguments passed to this function"
     "Generating assertion for ")
    '(is
      (thrown?
       java.lang.ClassCastException
       ("Generate an appropiate assertion for these arguments passed to this function"
        \G
        \e
        \n
        \e
        \r
        \a
        \t
        \i
        \n
        \g
        \space
        \a
        \s
        \s
        \e
        \r
        \t
        \i
        \o
        \n
        \space
        \f
        \o
        \r
        \space)))))Generating assertion for (generate-assertion "Generating assertion for " generic-args)Generating assertion for ("Generating assertion for ")
  (is
   (=
    (generate-assertion "Generating assertion for " generic-args)
    '(is
      (thrown?
       java.lang.ClassCastException
       ("Generating assertion for ")))))Generating assertion for (generate-assertion "Generating assertion for " "Generate an appropiate assertion for these arguments passed to this function")Generating assertion for ("Generating assertion for " \G \e \n \e \r \a \t \e \space \a \n \space \a \p \p \r \o \p \i \a \t \e \space \a \s \s \e \r \t \i \o \n \space \f \o \r \space \t \h \e \s \e \space \a \r \g \u \m \e \n \t \s \space \p \a \s \s \e \d \space \t \o \space \t \h \i \s \space \f \u \n \c \t \i \o \n)
  (is
   (=
    (generate-assertion
     "Generating assertion for "
     "Generate an appropiate assertion for these arguments passed to this function")
    '(is
      (thrown?
       java.lang.ClassCastException
       ("Generating assertion for "
        \G
        \e
        \n
        \e
        \r
        \a
        \t
        \e
        \space
        \a
        \n
        \space
        \a
        \p
        \p
        \r
        \o
        \p
        \i
        \a
        \t
        \e
        \space
        \a
        \s
        \s
        \e
        \r
        \t
        \i
        \o
        \n
        \space
        \f
        \o
        \r
        \space
        \t
        \h
        \e
        \s
        \e
        \space
        \a
        \r
        \g
        \u
        \m
        \e
        \n
        \t
        \s
        \space
        \p
        \a
        \s
        \s
        \e
        \d
        \space
        \t
        \o
        \space
        \t
        \h
        \i
        \s
        \space
        \f
        \u
        \n
        \c
        \t
        \i
        \o
        \n)))))Generating assertion for (generate-assertion "Generating assertion for " "Generating assertion for ")Generating assertion for ("Generating assertion for " \G \e \n \e \r \a \t \i \n \g \space \a \s \s \e \r \t \i \o \n \space \f \o \r \space)
  (is
   (=
    (generate-assertion
     "Generating assertion for "
     "Generating assertion for ")
    '(is
      (thrown?
       java.lang.ClassCastException
       ("Generating assertion for "
        \G
        \e
        \n
        \e
        \r
        \a
        \t
        \i
        \n
        \g
        \space
        \a
        \s
        \s
        \e
        \r
        \t
        \i
        \o
        \n
        \space
        \f
        \o
        \r
        \space)))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest
 test-constant?
 (testing
  "constant?"Generating assertion for (constant? generic-args)
  (is (= (constant? generic-args) 'true))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest
 test-constants
 (testing
  "constants"Generating assertion for (constants generic-args)
  (is
   (=
    (constants generic-args)
    '()))Generating assertion for (constants "return a list of all elements in this form which are constants")
  (is
   (=
    (constants
     "return a list of all elements in this form which are constants")
    '()))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest
 test-find-interesting-args
 (testing
  "find-interesting-args"Generating assertion for (find-interesting-args generic-args generic-args)
  (is
   (=
    (find-interesting-args generic-args generic-args)
    '()))Generating assertion for (find-interesting-args generic-args "Find things in sexpr which would be even more interesting if passed as arguments to it")
  (is
   (=
    (find-interesting-args
     generic-args
     "Find things in sexpr which would be even more interesting if passed as arguments to it")
    '(\F
      \i
      \n
      \d
      \space
      \t
      \h
      \i
      \n
      \g
      \s
      \space
      \i
      \n
      \space
      \s
      \e
      \x
      \p
      \r
      \space
      \w
      \h
      \i
      \c
      \h
      \space
      \w
      \o
      \u
      \l
      \d
      \space
      \b
      \e
      \space
      \e
      \v
      \e
      \n
      \space
      \m
      \o
      \r
      \e
      \space
      \i
      \n
      \t
      \e
      \r
      \e
      \s
      \t
      \i
      \n
      \g
      \space
      \i
      \f
      \space
      \p
      \a
      \s
      \s
      \e
      \d
      \space
      \a
      \s
      \space
      \a
      \r
      \g
      \u
      \m
      \e
      \n
      \t
      \s
      \space
      \t
      \o
      \space
      \i
      \t)))Generating assertion for (find-interesting-args generic-args 1.0E-4)
  